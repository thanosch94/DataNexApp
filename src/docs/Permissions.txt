Δομή των Permissions στην εφαρμογή

1) Κάθε component περιλαμβάνει ένα αρχείο με κατάληξη .permissions.ts
2) Το αρχείο αυτό περιλαμβάνει ένα const με δομή enum με τα σημεία της εφαρμογής όπου μπορούν να περαστούν permissions.
3) Επίσης θα υπάρχει το componentEntityId (πχ taskEditComponentId)
4) Τέλος θα υπάρχει μία λίστα που θα ξεχωρίζει τα πεδία με βάση το AppEntityType (πχ αν είναι στοιχείο Toolbar, αν είναι api call κτλ)
Δείγμα:
export const taskEditComponentId: any = '610be778-2354-4d1c-b4e3-f0e7724f2643';

const TaskEditPermissions = {
  CanSave_Toolbar: 'CanSave_Toolbar',
  CanDelete_Toolbar: 'CanDelete_Toolbar',
  EnableTaskTypeId_Field: 'EnableTaskTypeId_Field',
  EnableStatusId_Field: 'EnableStatusId_Field',
  EnableProjectId_Field: 'EnableProjectId_Field',
  EnableAssigneeId_Field: 'EnableAssigneeId_Field',
  EnableWorkItemPriority_Field: 'EnableWorkItemPriority_Field',
  EnableDueDate_Field: 'EnableDueDate_Field',
} as const;

export const TaskEditPermissionsList: Array<AppPermissionDto> = Object.entries(
  TaskEditPermissions
).map(([key]) => {
  if (key.includes('Toolbar')) {
    return { Key: key, AppEntity: AppEntityEnum.Toolbar };
  } else if (key.includes('Field')) {
    return { Key: key, AppEntity: AppEntityEnum.ComponentField };
  } else if (key.includes('APICall')) {
    return { Key: key, AppEntity: AppEntityEnum.APICall };
  } else {
    return { Key: key, AppEntity: AppEntityEnum.Other };
  }
});

5)Κατά το login καλούνται τα παρακάτω
            this.store.dispatch(GetAllAppPermissions())
            this.store.dispatch(GetUserAppPermissionsByUserId({id:user.Id}))
και ενημερώνεται το state στα AppPermissions και UserAppPermissions
Τα AppPermissions κρατάνε τα permissions που έχει περάσει κάποιος admin στην εφαρμογή.
Τα UserAppPermission κρατάνε τα permissions που έχει ο χρήστης όταν κάνει login.


6)Σε κάθε component στο ngOnInit θα καλείται η μέθοδος getComponentPermissions και η getUserPermission
    a) this.getComponentPermissions(structuredClone(TaskEditPermissionsList), taskEditComponentId);
    b) this.getUserPermission()


  Η μέθοδος (a) υπάρχει στο BaseComponent που κάνουν extend όλα τα components της εφαρμογής
  Ορίζει τα παρακάτω ώστε να ειναι προσβάσιμα από το BaseComponent:
     this.componentPermissions = permissionsList;
     this.componentId = entityId;

  Η (b) χρησιμοποιείται εντος του component για να δημιουργηθούν οι μεταβλητές που θα χρησιμοποιηθούν στην html:
      this.perm_CanDelete = await this.hasPermission('CanDelete_Toolbar')??true

      Η μέθοδος hasPermission υπάρχει στο BaseComponent και κάνει ένα select από το state τα AppPermissions και τα UserAppPermissions
      Χρησιμοποιώντας το componentId που έχει αποθηκεύσει από την προηούμενη και το Key που του στέλνουμε σαν παράμετρο, βρίσκει αν
      υπάρχει permission στα AppPermissions.
      Περίπτωση 1
      Αν δεν υπάρχει στη λίστα επιστρέφει null οπότε αυτόματα και το permission γίνεται true. (Αν δεν έχει περαστεί permission από
      κάποιον admin όλα είναι ανοιχτά για όλους)

      Περίπτωση 2
      Αν υπάρχει το permission ελέγχει στο UserAppPermissions αν υπάρχει εγγραφή με AppPermissionId το παραπάνω και UserId το Id του
      user που είναι συνδεδεμένος. Αν υπάρχει επιστρέφει true αλλιώς επιστρέφει false.



